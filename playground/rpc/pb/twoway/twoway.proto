syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.twoway";
option java_outer_classname = "TwoWayProto";

option go_package = "github.com/peizhong/letsgo/playground/rpc/pb/twoway";

// protoc --go_out=paths=source_relative,plugins=grpc:. twoway/twoway.proto

package twoway;

import "helloworld/helloworld.proto";

// The greeting service definition.
service TwoWayJob {
    // a simple rpc, import from other package
    rpc Simple (helloworld.HelloRequest) returns (helloworld.HelloReply) {}
    rpc GetFeature(Point) returns (Feature) {}

    // server-side streaming RPC where the client sends a request to the server and gets a stream to read a sequence of messages back
    rpc ListFeatures(Rectangle) returns (stream Feature) {}

    // client-side streaming RPC where the client writes a sequence of messages and sends them to the server
    rpc RecordRoute(stream Point) returns (RouteSummary) {}

    // bidirectional streaming RPC where both sides send a sequence of messages using a read-write stream
    rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

message OneOfMessage {
  oneof test_oneof {
    string name = 4;
    Point pt = 9;
  }
}

message Emiu {
    int32 value = 1;
    enum Corpus {
        UNIVERSAL = 0;
        WEB = 1;
        IMAGES = 2;
        LOCAL = 3;
        NEWS = 4;
        PRODUCTS = 5;
        VIDEO = 6;
    }
    Corpus type = 2;
}

message Point {
    int32 latitude = 1;
    int32 longitude = 2;
}

message Rectangle {
    // One corner of the rectangle.
    Point lo = 1;

    // The other corner of the rectangle.
    Point hi = 2;
}

message RouteNote {
    // The location from which the message is sent.
    Point location = 1;

    // The message to be sent.
    string message = 2;
}

message Feature {
    // The name of the feature.
    string name = 1;

    // The point where the feature is detected.
    Point location = 2;
}

message RouteSummary {
    // The number of points received.
    int32 point_count = 1;

    // The number of known features passed while traversing the route.
    int32 feature_count = 2;

    // The distance covered in metres.
    int32 distance = 3;

    // The duration of the traversal in seconds.
    int32 elapsed_time = 4;
}