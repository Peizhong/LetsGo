// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: twoway/twoway.proto

// protoc --go_out=paths=source_relative,plugins=grpc:. twoway/twoway.proto

package twoway

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	helloworld "github.com/peizhong/letsgo/playground/rpc/pb/helloworld"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Emiu_Corpus int32

const (
	Emiu_UNIVERSAL Emiu_Corpus = 0
	Emiu_WEB       Emiu_Corpus = 1
	Emiu_IMAGES    Emiu_Corpus = 2
	Emiu_LOCAL     Emiu_Corpus = 3
	Emiu_NEWS      Emiu_Corpus = 4
	Emiu_PRODUCTS  Emiu_Corpus = 5
	Emiu_VIDEO     Emiu_Corpus = 6
)

// Enum value maps for Emiu_Corpus.
var (
	Emiu_Corpus_name = map[int32]string{
		0: "UNIVERSAL",
		1: "WEB",
		2: "IMAGES",
		3: "LOCAL",
		4: "NEWS",
		5: "PRODUCTS",
		6: "VIDEO",
	}
	Emiu_Corpus_value = map[string]int32{
		"UNIVERSAL": 0,
		"WEB":       1,
		"IMAGES":    2,
		"LOCAL":     3,
		"NEWS":      4,
		"PRODUCTS":  5,
		"VIDEO":     6,
	}
)

func (x Emiu_Corpus) Enum() *Emiu_Corpus {
	p := new(Emiu_Corpus)
	*p = x
	return p
}

func (x Emiu_Corpus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Emiu_Corpus) Descriptor() protoreflect.EnumDescriptor {
	return file_twoway_twoway_proto_enumTypes[0].Descriptor()
}

func (Emiu_Corpus) Type() protoreflect.EnumType {
	return &file_twoway_twoway_proto_enumTypes[0]
}

func (x Emiu_Corpus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Emiu_Corpus.Descriptor instead.
func (Emiu_Corpus) EnumDescriptor() ([]byte, []int) {
	return file_twoway_twoway_proto_rawDescGZIP(), []int{1, 0}
}

type OneOfMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TestOneof:
	//	*OneOfMessage_Name
	//	*OneOfMessage_Pt
	TestOneof isOneOfMessage_TestOneof `protobuf_oneof:"test_oneof"`
}

func (x *OneOfMessage) Reset() {
	*x = OneOfMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twoway_twoway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOfMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOfMessage) ProtoMessage() {}

func (x *OneOfMessage) ProtoReflect() protoreflect.Message {
	mi := &file_twoway_twoway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOfMessage.ProtoReflect.Descriptor instead.
func (*OneOfMessage) Descriptor() ([]byte, []int) {
	return file_twoway_twoway_proto_rawDescGZIP(), []int{0}
}

func (m *OneOfMessage) GetTestOneof() isOneOfMessage_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (x *OneOfMessage) GetName() string {
	if x, ok := x.GetTestOneof().(*OneOfMessage_Name); ok {
		return x.Name
	}
	return ""
}

func (x *OneOfMessage) GetPt() *Point {
	if x, ok := x.GetTestOneof().(*OneOfMessage_Pt); ok {
		return x.Pt
	}
	return nil
}

type isOneOfMessage_TestOneof interface {
	isOneOfMessage_TestOneof()
}

type OneOfMessage_Name struct {
	Name string `protobuf:"bytes,4,opt,name=name,proto3,oneof"`
}

type OneOfMessage_Pt struct {
	Pt *Point `protobuf:"bytes,9,opt,name=pt,proto3,oneof"`
}

func (*OneOfMessage_Name) isOneOfMessage_TestOneof() {}

func (*OneOfMessage_Pt) isOneOfMessage_TestOneof() {}

type Emiu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32       `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Type  Emiu_Corpus `protobuf:"varint,2,opt,name=type,proto3,enum=twoway.Emiu_Corpus" json:"type,omitempty"`
}

func (x *Emiu) Reset() {
	*x = Emiu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twoway_twoway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emiu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emiu) ProtoMessage() {}

func (x *Emiu) ProtoReflect() protoreflect.Message {
	mi := &file_twoway_twoway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emiu.ProtoReflect.Descriptor instead.
func (*Emiu) Descriptor() ([]byte, []int) {
	return file_twoway_twoway_proto_rawDescGZIP(), []int{1}
}

func (x *Emiu) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Emiu) GetType() Emiu_Corpus {
	if x != nil {
		return x.Type
	}
	return Emiu_UNIVERSAL
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  int32 `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude int32 `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twoway_twoway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_twoway_twoway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_twoway_twoway_proto_rawDescGZIP(), []int{2}
}

func (x *Point) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Point) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type Rectangle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One corner of the rectangle.
	Lo *Point `protobuf:"bytes,1,opt,name=lo,proto3" json:"lo,omitempty"`
	// The other corner of the rectangle.
	Hi *Point `protobuf:"bytes,2,opt,name=hi,proto3" json:"hi,omitempty"`
}

func (x *Rectangle) Reset() {
	*x = Rectangle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twoway_twoway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rectangle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rectangle) ProtoMessage() {}

func (x *Rectangle) ProtoReflect() protoreflect.Message {
	mi := &file_twoway_twoway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rectangle.ProtoReflect.Descriptor instead.
func (*Rectangle) Descriptor() ([]byte, []int) {
	return file_twoway_twoway_proto_rawDescGZIP(), []int{3}
}

func (x *Rectangle) GetLo() *Point {
	if x != nil {
		return x.Lo
	}
	return nil
}

func (x *Rectangle) GetHi() *Point {
	if x != nil {
		return x.Hi
	}
	return nil
}

type RouteNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The location from which the message is sent.
	Location *Point `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// The message to be sent.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RouteNote) Reset() {
	*x = RouteNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twoway_twoway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteNote) ProtoMessage() {}

func (x *RouteNote) ProtoReflect() protoreflect.Message {
	mi := &file_twoway_twoway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteNote.ProtoReflect.Descriptor instead.
func (*RouteNote) Descriptor() ([]byte, []int) {
	return file_twoway_twoway_proto_rawDescGZIP(), []int{4}
}

func (x *RouteNote) GetLocation() *Point {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *RouteNote) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the feature.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The point where the feature is detected.
	Location *Point `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twoway_twoway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_twoway_twoway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_twoway_twoway_proto_rawDescGZIP(), []int{5}
}

func (x *Feature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Feature) GetLocation() *Point {
	if x != nil {
		return x.Location
	}
	return nil
}

type RouteSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of points received.
	PointCount int32 `protobuf:"varint,1,opt,name=point_count,json=pointCount,proto3" json:"point_count,omitempty"`
	// The number of known features passed while traversing the route.
	FeatureCount int32 `protobuf:"varint,2,opt,name=feature_count,json=featureCount,proto3" json:"feature_count,omitempty"`
	// The distance covered in metres.
	Distance int32 `protobuf:"varint,3,opt,name=distance,proto3" json:"distance,omitempty"`
	// The duration of the traversal in seconds.
	ElapsedTime int32 `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
}

func (x *RouteSummary) Reset() {
	*x = RouteSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twoway_twoway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSummary) ProtoMessage() {}

func (x *RouteSummary) ProtoReflect() protoreflect.Message {
	mi := &file_twoway_twoway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSummary.ProtoReflect.Descriptor instead.
func (*RouteSummary) Descriptor() ([]byte, []int) {
	return file_twoway_twoway_proto_rawDescGZIP(), []int{6}
}

func (x *RouteSummary) GetPointCount() int32 {
	if x != nil {
		return x.PointCount
	}
	return 0
}

func (x *RouteSummary) GetFeatureCount() int32 {
	if x != nil {
		return x.FeatureCount
	}
	return 0
}

func (x *RouteSummary) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *RouteSummary) GetElapsedTime() int32 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

var File_twoway_twoway_proto protoreflect.FileDescriptor

var file_twoway_twoway_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2f, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x1a, 0x1b, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x0c, 0x4f, 0x6e,
	0x65, 0x4f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x02, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x02, 0x70,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22,
	0xa1, 0x01, 0x0a, 0x04, 0x45, 0x6d, 0x69, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74,
	0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x6d, 0x69, 0x75, 0x2e, 0x43, 0x6f, 0x72, 0x70, 0x75,
	0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x06, 0x43, 0x6f, 0x72, 0x70, 0x75,
	0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x57, 0x53, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x10, 0x06, 0x22, 0x41, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02,
	0x6c, 0x6f, 0x12, 0x1d, 0x0a, 0x02, 0x68, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x68,
	0x69, 0x22, 0x50, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01,
	0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0xa2, 0x02, 0x0a, 0x09, 0x54, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x4a, 0x6f,
	0x62, 0x12, 0x3c, 0x0a, 0x06, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x2e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0d, 0x2e,
	0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x0f, 0x2e, 0x74,
	0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12,
	0x36, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x11, 0x2e, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x1a, 0x0f, 0x2e, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x37, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x11, 0x2e, 0x74,
	0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x1a,
	0x11, 0x2e, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x5d, 0x0a, 0x17, 0x69, 0x6f, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x74, 0x77, 0x6f,
	0x77, 0x61, 0x79, 0x42, 0x0b, 0x54, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x65, 0x69, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x2f, 0x6c, 0x65, 0x74, 0x73, 0x67, 0x6f, 0x2f, 0x70,
	0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62,
	0x2f, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_twoway_twoway_proto_rawDescOnce sync.Once
	file_twoway_twoway_proto_rawDescData = file_twoway_twoway_proto_rawDesc
)

func file_twoway_twoway_proto_rawDescGZIP() []byte {
	file_twoway_twoway_proto_rawDescOnce.Do(func() {
		file_twoway_twoway_proto_rawDescData = protoimpl.X.CompressGZIP(file_twoway_twoway_proto_rawDescData)
	})
	return file_twoway_twoway_proto_rawDescData
}

var file_twoway_twoway_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_twoway_twoway_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_twoway_twoway_proto_goTypes = []interface{}{
	(Emiu_Corpus)(0),                // 0: twoway.Emiu.Corpus
	(*OneOfMessage)(nil),            // 1: twoway.OneOfMessage
	(*Emiu)(nil),                    // 2: twoway.Emiu
	(*Point)(nil),                   // 3: twoway.Point
	(*Rectangle)(nil),               // 4: twoway.Rectangle
	(*RouteNote)(nil),               // 5: twoway.RouteNote
	(*Feature)(nil),                 // 6: twoway.Feature
	(*RouteSummary)(nil),            // 7: twoway.RouteSummary
	(*helloworld.HelloRequest)(nil), // 8: helloworld.HelloRequest
	(*helloworld.HelloReply)(nil),   // 9: helloworld.HelloReply
}
var file_twoway_twoway_proto_depIdxs = []int32{
	3,  // 0: twoway.OneOfMessage.pt:type_name -> twoway.Point
	0,  // 1: twoway.Emiu.type:type_name -> twoway.Emiu.Corpus
	3,  // 2: twoway.Rectangle.lo:type_name -> twoway.Point
	3,  // 3: twoway.Rectangle.hi:type_name -> twoway.Point
	3,  // 4: twoway.RouteNote.location:type_name -> twoway.Point
	3,  // 5: twoway.Feature.location:type_name -> twoway.Point
	8,  // 6: twoway.TwoWayJob.Simple:input_type -> helloworld.HelloRequest
	3,  // 7: twoway.TwoWayJob.GetFeature:input_type -> twoway.Point
	4,  // 8: twoway.TwoWayJob.ListFeatures:input_type -> twoway.Rectangle
	3,  // 9: twoway.TwoWayJob.RecordRoute:input_type -> twoway.Point
	5,  // 10: twoway.TwoWayJob.RouteChat:input_type -> twoway.RouteNote
	9,  // 11: twoway.TwoWayJob.Simple:output_type -> helloworld.HelloReply
	6,  // 12: twoway.TwoWayJob.GetFeature:output_type -> twoway.Feature
	6,  // 13: twoway.TwoWayJob.ListFeatures:output_type -> twoway.Feature
	7,  // 14: twoway.TwoWayJob.RecordRoute:output_type -> twoway.RouteSummary
	5,  // 15: twoway.TwoWayJob.RouteChat:output_type -> twoway.RouteNote
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_twoway_twoway_proto_init() }
func file_twoway_twoway_proto_init() {
	if File_twoway_twoway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_twoway_twoway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOfMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twoway_twoway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emiu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twoway_twoway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twoway_twoway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rectangle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twoway_twoway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twoway_twoway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twoway_twoway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_twoway_twoway_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*OneOfMessage_Name)(nil),
		(*OneOfMessage_Pt)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_twoway_twoway_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_twoway_twoway_proto_goTypes,
		DependencyIndexes: file_twoway_twoway_proto_depIdxs,
		EnumInfos:         file_twoway_twoway_proto_enumTypes,
		MessageInfos:      file_twoway_twoway_proto_msgTypes,
	}.Build()
	File_twoway_twoway_proto = out.File
	file_twoway_twoway_proto_rawDesc = nil
	file_twoway_twoway_proto_goTypes = nil
	file_twoway_twoway_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TwoWayJobClient is the client API for TwoWayJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TwoWayJobClient interface {
	// a simple rpc, import from other package
	Simple(ctx context.Context, in *helloworld.HelloRequest, opts ...grpc.CallOption) (*helloworld.HelloReply, error)
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
	// server-side streaming RPC where the client sends a request to the server and gets a stream to read a sequence of messages back
	ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (TwoWayJob_ListFeaturesClient, error)
	// client-side streaming RPC where the client writes a sequence of messages and sends them to the server
	RecordRoute(ctx context.Context, opts ...grpc.CallOption) (TwoWayJob_RecordRouteClient, error)
	// bidirectional streaming RPC where both sides send a sequence of messages using a read-write stream
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (TwoWayJob_RouteChatClient, error)
}

type twoWayJobClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoWayJobClient(cc grpc.ClientConnInterface) TwoWayJobClient {
	return &twoWayJobClient{cc}
}

func (c *twoWayJobClient) Simple(ctx context.Context, in *helloworld.HelloRequest, opts ...grpc.CallOption) (*helloworld.HelloReply, error) {
	out := new(helloworld.HelloReply)
	err := c.cc.Invoke(ctx, "/twoway.TwoWayJob/Simple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoWayJobClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/twoway.TwoWayJob/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoWayJobClient) ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (TwoWayJob_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TwoWayJob_serviceDesc.Streams[0], "/twoway.TwoWayJob/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &twoWayJobListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TwoWayJob_ListFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type twoWayJobListFeaturesClient struct {
	grpc.ClientStream
}

func (x *twoWayJobListFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *twoWayJobClient) RecordRoute(ctx context.Context, opts ...grpc.CallOption) (TwoWayJob_RecordRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TwoWayJob_serviceDesc.Streams[1], "/twoway.TwoWayJob/RecordRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &twoWayJobRecordRouteClient{stream}
	return x, nil
}

type TwoWayJob_RecordRouteClient interface {
	Send(*Point) error
	CloseAndRecv() (*RouteSummary, error)
	grpc.ClientStream
}

type twoWayJobRecordRouteClient struct {
	grpc.ClientStream
}

func (x *twoWayJobRecordRouteClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *twoWayJobRecordRouteClient) CloseAndRecv() (*RouteSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RouteSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *twoWayJobClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (TwoWayJob_RouteChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TwoWayJob_serviceDesc.Streams[2], "/twoway.TwoWayJob/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &twoWayJobRouteChatClient{stream}
	return x, nil
}

type TwoWayJob_RouteChatClient interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ClientStream
}

type twoWayJobRouteChatClient struct {
	grpc.ClientStream
}

func (x *twoWayJobRouteChatClient) Send(m *RouteNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *twoWayJobRouteChatClient) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TwoWayJobServer is the server API for TwoWayJob service.
type TwoWayJobServer interface {
	// a simple rpc, import from other package
	Simple(context.Context, *helloworld.HelloRequest) (*helloworld.HelloReply, error)
	GetFeature(context.Context, *Point) (*Feature, error)
	// server-side streaming RPC where the client sends a request to the server and gets a stream to read a sequence of messages back
	ListFeatures(*Rectangle, TwoWayJob_ListFeaturesServer) error
	// client-side streaming RPC where the client writes a sequence of messages and sends them to the server
	RecordRoute(TwoWayJob_RecordRouteServer) error
	// bidirectional streaming RPC where both sides send a sequence of messages using a read-write stream
	RouteChat(TwoWayJob_RouteChatServer) error
}

// UnimplementedTwoWayJobServer can be embedded to have forward compatible implementations.
type UnimplementedTwoWayJobServer struct {
}

func (*UnimplementedTwoWayJobServer) Simple(context.Context, *helloworld.HelloRequest) (*helloworld.HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Simple not implemented")
}
func (*UnimplementedTwoWayJobServer) GetFeature(context.Context, *Point) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (*UnimplementedTwoWayJobServer) ListFeatures(*Rectangle, TwoWayJob_ListFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (*UnimplementedTwoWayJobServer) RecordRoute(TwoWayJob_RecordRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordRoute not implemented")
}
func (*UnimplementedTwoWayJobServer) RouteChat(TwoWayJob_RouteChatServer) error {
	return status.Errorf(codes.Unimplemented, "method RouteChat not implemented")
}

func RegisterTwoWayJobServer(s *grpc.Server, srv TwoWayJobServer) {
	s.RegisterService(&_TwoWayJob_serviceDesc, srv)
}

func _TwoWayJob_Simple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(helloworld.HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoWayJobServer).Simple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twoway.TwoWayJob/Simple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoWayJobServer).Simple(ctx, req.(*helloworld.HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoWayJob_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoWayJobServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twoway.TwoWayJob/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoWayJobServer).GetFeature(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoWayJob_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Rectangle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TwoWayJobServer).ListFeatures(m, &twoWayJobListFeaturesServer{stream})
}

type TwoWayJob_ListFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type twoWayJobListFeaturesServer struct {
	grpc.ServerStream
}

func (x *twoWayJobListFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func _TwoWayJob_RecordRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TwoWayJobServer).RecordRoute(&twoWayJobRecordRouteServer{stream})
}

type TwoWayJob_RecordRouteServer interface {
	SendAndClose(*RouteSummary) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type twoWayJobRecordRouteServer struct {
	grpc.ServerStream
}

func (x *twoWayJobRecordRouteServer) SendAndClose(m *RouteSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *twoWayJobRecordRouteServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TwoWayJob_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TwoWayJobServer).RouteChat(&twoWayJobRouteChatServer{stream})
}

type TwoWayJob_RouteChatServer interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ServerStream
}

type twoWayJobRouteChatServer struct {
	grpc.ServerStream
}

func (x *twoWayJobRouteChatServer) Send(m *RouteNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *twoWayJobRouteChatServer) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TwoWayJob_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twoway.TwoWayJob",
	HandlerType: (*TwoWayJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Simple",
			Handler:    _TwoWayJob_Simple_Handler,
		},
		{
			MethodName: "GetFeature",
			Handler:    _TwoWayJob_GetFeature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatures",
			Handler:       _TwoWayJob_ListFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordRoute",
			Handler:       _TwoWayJob_RecordRoute_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RouteChat",
			Handler:       _TwoWayJob_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "twoway/twoway.proto",
}
