// Code generated by protoc-gen-go. DO NOT EDIT.
// source: twoway/twoway.proto

package twoway

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	helloworld "github.com/peizhong/letsgo/playground/rpc/pb/helloworld"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type Hello2Request struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hello2Request) Reset()         { *m = Hello2Request{} }
func (m *Hello2Request) String() string { return proto.CompactTextString(m) }
func (*Hello2Request) ProtoMessage()    {}
func (*Hello2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76fcd9484938dcc, []int{0}
}

func (m *Hello2Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hello2Request.Unmarshal(m, b)
}
func (m *Hello2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hello2Request.Marshal(b, m, deterministic)
}
func (m *Hello2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hello2Request.Merge(m, src)
}
func (m *Hello2Request) XXX_Size() int {
	return xxx_messageInfo_Hello2Request.Size(m)
}
func (m *Hello2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Hello2Request.DiscardUnknown(m)
}

var xxx_messageInfo_Hello2Request proto.InternalMessageInfo

func (m *Hello2Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type Hello2Reply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hello2Reply) Reset()         { *m = Hello2Reply{} }
func (m *Hello2Reply) String() string { return proto.CompactTextString(m) }
func (*Hello2Reply) ProtoMessage()    {}
func (*Hello2Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76fcd9484938dcc, []int{1}
}

func (m *Hello2Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hello2Reply.Unmarshal(m, b)
}
func (m *Hello2Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hello2Reply.Marshal(b, m, deterministic)
}
func (m *Hello2Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hello2Reply.Merge(m, src)
}
func (m *Hello2Reply) XXX_Size() int {
	return xxx_messageInfo_Hello2Reply.Size(m)
}
func (m *Hello2Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Hello2Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Hello2Reply proto.InternalMessageInfo

func (m *Hello2Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Person struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	HasPonycopter        bool     `protobuf:"varint,3,opt,name=has_ponycopter,json=hasPonycopter,proto3" json:"has_ponycopter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Person) Reset()         { *m = Person{} }
func (m *Person) String() string { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()    {}
func (*Person) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76fcd9484938dcc, []int{2}
}

func (m *Person) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Person.Unmarshal(m, b)
}
func (m *Person) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Person.Marshal(b, m, deterministic)
}
func (m *Person) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person.Merge(m, src)
}
func (m *Person) XXX_Size() int {
	return xxx_messageInfo_Person.Size(m)
}
func (m *Person) XXX_DiscardUnknown() {
	xxx_messageInfo_Person.DiscardUnknown(m)
}

var xxx_messageInfo_Person proto.InternalMessageInfo

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Person) GetHasPonycopter() bool {
	if m != nil {
		return m.HasPonycopter
	}
	return false
}

func init() {
	proto.RegisterType((*Hello2Request)(nil), "twoway.Hello2Request")
	proto.RegisterType((*Hello2Reply)(nil), "twoway.Hello2Reply")
	proto.RegisterType((*Person)(nil), "twoway.Person")
}

func init() { proto.RegisterFile("twoway/twoway.proto", fileDescriptor_b76fcd9484938dcc) }

var fileDescriptor_b76fcd9484938dcc = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xed, 0xd4, 0x69, 0xdf, 0xd8, 0x0e, 0x19, 0x6a, 0x99, 0x97, 0x51, 0x11, 0x77, 0x6a,
	0x60, 0x3b, 0x79, 0x12, 0x86, 0x07, 0xf1, 0x54, 0x3a, 0x61, 0x20, 0x88, 0xa4, 0x6d, 0x68, 0x0b,
	0x69, 0x5f, 0x4c, 0x32, 0x6a, 0xfc, 0x07, 0xfc, 0xb7, 0x65, 0x6d, 0xe7, 0x2f, 0x76, 0xca, 0x7b,
	0xdf, 0x7c, 0x12, 0xde, 0xfb, 0x7e, 0x61, 0x6c, 0x6a, 0xac, 0x99, 0xa5, 0xed, 0x11, 0x48, 0x85,
	0x06, 0x49, 0xbf, 0xed, 0x26, 0x97, 0x39, 0x17, 0x02, 0x6b, 0x54, 0x22, 0xa5, 0x3f, 0x65, 0x0b,
	0xf9, 0x57, 0x30, 0x7c, 0xd8, 0x6a, 0xf3, 0x88, 0xbf, 0x6d, 0xb8, 0x36, 0x84, 0xc0, 0x51, 0xc5,
	0x4a, 0xee, 0x39, 0x53, 0x67, 0xe6, 0x46, 0x4d, 0xed, 0xdf, 0xc0, 0x60, 0x07, 0x49, 0x61, 0x89,
	0x07, 0x27, 0x25, 0xd7, 0x9a, 0x65, 0x3b, 0x6a, 0xd7, 0xfa, 0x2b, 0xe8, 0x87, 0x5c, 0x69, 0xac,
	0xf6, 0x7d, 0x43, 0x46, 0xd0, 0x2b, 0x52, 0xaf, 0x37, 0x75, 0x66, 0xc7, 0x51, 0xaf, 0x48, 0xc9,
	0x35, 0x8c, 0x72, 0xa6, 0x5f, 0x25, 0x56, 0x36, 0x41, 0x69, 0xb8, 0xf2, 0x0e, 0xa7, 0xce, 0xec,
	0x34, 0x1a, 0xe6, 0x4c, 0x87, 0xdf, 0xe2, 0xfc, 0xd3, 0x01, 0xf7, 0xa9, 0xc6, 0x35, 0xb3, 0x8f,
	0x18, 0x93, 0x3b, 0x70, 0xef, 0x71, 0x89, 0x26, 0x5f, 0x33, 0x4b, 0xbc, 0xe0, 0xd7, 0x42, 0xcd,
	0x88, 0xdd, 0x1a, 0x93, 0xf3, 0x3d, 0x37, 0x52, 0x58, 0xff, 0x80, 0xdc, 0x82, 0xbb, 0x62, 0x76,
	0xde, 0x68, 0xe4, 0x2c, 0xe8, 0x2c, 0xfb, 0x63, 0xc2, 0x64, 0xfc, 0x5f, 0x6e, 0x9e, 0x2e, 0x5f,
	0xe0, 0xa2, 0xc0, 0x20, 0x53, 0x32, 0x09, 0xf8, 0x3b, 0x2b, 0xa5, 0xe0, 0xba, 0x03, 0x97, 0x83,
	0x76, 0xc2, 0x70, 0x6b, 0x6a, 0xe8, 0x3c, 0x2f, 0xb2, 0xc2, 0xe4, 0x9b, 0x38, 0x48, 0xb0, 0xa4,
	0x92, 0x17, 0x1f, 0x39, 0x56, 0x19, 0x15, 0xdc, 0xe8, 0x0c, 0xa9, 0x14, 0xcc, 0x66, 0x0a, 0x37,
	0x55, 0x4a, 0x95, 0x4c, 0xa8, 0x8c, 0xbb, 0xd8, 0xe2, 0x7e, 0x13, 0xc9, 0xe2, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0x2a, 0xba, 0x01, 0xe7, 0xce, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TwoWayJobClient is the client API for TwoWayJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TwoWayJobClient interface {
	DoBothWay(ctx context.Context, in *helloworld.HelloRequest, opts ...grpc.CallOption) (*helloworld.HelloReply, error)
	// Sends a greeting
	Say2Hello(ctx context.Context, in *Hello2Request, opts ...grpc.CallOption) (*Hello2Reply, error)
}

type twoWayJobClient struct {
	cc *grpc.ClientConn
}

func NewTwoWayJobClient(cc *grpc.ClientConn) TwoWayJobClient {
	return &twoWayJobClient{cc}
}

func (c *twoWayJobClient) DoBothWay(ctx context.Context, in *helloworld.HelloRequest, opts ...grpc.CallOption) (*helloworld.HelloReply, error) {
	out := new(helloworld.HelloReply)
	err := c.cc.Invoke(ctx, "/twoway.TwoWayJob/DoBothWay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoWayJobClient) Say2Hello(ctx context.Context, in *Hello2Request, opts ...grpc.CallOption) (*Hello2Reply, error) {
	out := new(Hello2Reply)
	err := c.cc.Invoke(ctx, "/twoway.TwoWayJob/Say2Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoWayJobServer is the server API for TwoWayJob service.
type TwoWayJobServer interface {
	DoBothWay(context.Context, *helloworld.HelloRequest) (*helloworld.HelloReply, error)
	// Sends a greeting
	Say2Hello(context.Context, *Hello2Request) (*Hello2Reply, error)
}

// UnimplementedTwoWayJobServer can be embedded to have forward compatible implementations.
type UnimplementedTwoWayJobServer struct {
}

func (*UnimplementedTwoWayJobServer) DoBothWay(ctx context.Context, req *helloworld.HelloRequest) (*helloworld.HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoBothWay not implemented")
}
func (*UnimplementedTwoWayJobServer) Say2Hello(ctx context.Context, req *Hello2Request) (*Hello2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say2Hello not implemented")
}

func RegisterTwoWayJobServer(s *grpc.Server, srv TwoWayJobServer) {
	s.RegisterService(&_TwoWayJob_serviceDesc, srv)
}

func _TwoWayJob_DoBothWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(helloworld.HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoWayJobServer).DoBothWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twoway.TwoWayJob/DoBothWay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoWayJobServer).DoBothWay(ctx, req.(*helloworld.HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoWayJob_Say2Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoWayJobServer).Say2Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twoway.TwoWayJob/Say2Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoWayJobServer).Say2Hello(ctx, req.(*Hello2Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _TwoWayJob_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twoway.TwoWayJob",
	HandlerType: (*TwoWayJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoBothWay",
			Handler:    _TwoWayJob_DoBothWay_Handler,
		},
		{
			MethodName: "Say2Hello",
			Handler:    _TwoWayJob_Say2Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twoway/twoway.proto",
}
