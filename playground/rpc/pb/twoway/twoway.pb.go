// Code generated by protoc-gen-go. DO NOT EDIT.
// source: twoway/twoway.proto

package twoway

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	helloworld "github.com/peizhong/letsgo/playground/rpc/pb/helloworld"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Emiu_Corpus int32

const (
	Emiu_UNIVERSAL Emiu_Corpus = 0
	Emiu_WEB       Emiu_Corpus = 1
	Emiu_IMAGES    Emiu_Corpus = 2
	Emiu_LOCAL     Emiu_Corpus = 3
	Emiu_NEWS      Emiu_Corpus = 4
	Emiu_PRODUCTS  Emiu_Corpus = 5
	Emiu_VIDEO     Emiu_Corpus = 6
)

var Emiu_Corpus_name = map[int32]string{
	0: "UNIVERSAL",
	1: "WEB",
	2: "IMAGES",
	3: "LOCAL",
	4: "NEWS",
	5: "PRODUCTS",
	6: "VIDEO",
}

var Emiu_Corpus_value = map[string]int32{
	"UNIVERSAL": 0,
	"WEB":       1,
	"IMAGES":    2,
	"LOCAL":     3,
	"NEWS":      4,
	"PRODUCTS":  5,
	"VIDEO":     6,
}

func (x Emiu_Corpus) String() string {
	return proto.EnumName(Emiu_Corpus_name, int32(x))
}

func (Emiu_Corpus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b76fcd9484938dcc, []int{1, 0}
}

type OneOfMessage struct {
	// Types that are valid to be assigned to TestOneof:
	//	*OneOfMessage_Name
	//	*OneOfMessage_Pt
	TestOneof            isOneOfMessage_TestOneof `protobuf_oneof:"test_oneof"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *OneOfMessage) Reset()         { *m = OneOfMessage{} }
func (m *OneOfMessage) String() string { return proto.CompactTextString(m) }
func (*OneOfMessage) ProtoMessage()    {}
func (*OneOfMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76fcd9484938dcc, []int{0}
}

func (m *OneOfMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OneOfMessage.Unmarshal(m, b)
}
func (m *OneOfMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OneOfMessage.Marshal(b, m, deterministic)
}
func (m *OneOfMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneOfMessage.Merge(m, src)
}
func (m *OneOfMessage) XXX_Size() int {
	return xxx_messageInfo_OneOfMessage.Size(m)
}
func (m *OneOfMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OneOfMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OneOfMessage proto.InternalMessageInfo

type isOneOfMessage_TestOneof interface {
	isOneOfMessage_TestOneof()
}

type OneOfMessage_Name struct {
	Name string `protobuf:"bytes,4,opt,name=name,proto3,oneof"`
}

type OneOfMessage_Pt struct {
	Pt *Point `protobuf:"bytes,9,opt,name=pt,proto3,oneof"`
}

func (*OneOfMessage_Name) isOneOfMessage_TestOneof() {}

func (*OneOfMessage_Pt) isOneOfMessage_TestOneof() {}

func (m *OneOfMessage) GetTestOneof() isOneOfMessage_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (m *OneOfMessage) GetName() string {
	if x, ok := m.GetTestOneof().(*OneOfMessage_Name); ok {
		return x.Name
	}
	return ""
}

func (m *OneOfMessage) GetPt() *Point {
	if x, ok := m.GetTestOneof().(*OneOfMessage_Pt); ok {
		return x.Pt
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OneOfMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OneOfMessage_Name)(nil),
		(*OneOfMessage_Pt)(nil),
	}
}

type Emiu struct {
	Value                int32       `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Type                 Emiu_Corpus `protobuf:"varint,2,opt,name=type,proto3,enum=twoway.Emiu_Corpus" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Emiu) Reset()         { *m = Emiu{} }
func (m *Emiu) String() string { return proto.CompactTextString(m) }
func (*Emiu) ProtoMessage()    {}
func (*Emiu) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76fcd9484938dcc, []int{1}
}

func (m *Emiu) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Emiu.Unmarshal(m, b)
}
func (m *Emiu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Emiu.Marshal(b, m, deterministic)
}
func (m *Emiu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Emiu.Merge(m, src)
}
func (m *Emiu) XXX_Size() int {
	return xxx_messageInfo_Emiu.Size(m)
}
func (m *Emiu) XXX_DiscardUnknown() {
	xxx_messageInfo_Emiu.DiscardUnknown(m)
}

var xxx_messageInfo_Emiu proto.InternalMessageInfo

func (m *Emiu) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Emiu) GetType() Emiu_Corpus {
	if m != nil {
		return m.Type
	}
	return Emiu_UNIVERSAL
}

type Point struct {
	Latitude             int32    `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            int32    `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76fcd9484938dcc, []int{2}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLatitude() int32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Point) GetLongitude() int32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Rectangle struct {
	// One corner of the rectangle.
	Lo *Point `protobuf:"bytes,1,opt,name=lo,proto3" json:"lo,omitempty"`
	// The other corner of the rectangle.
	Hi                   *Point   `protobuf:"bytes,2,opt,name=hi,proto3" json:"hi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rectangle) Reset()         { *m = Rectangle{} }
func (m *Rectangle) String() string { return proto.CompactTextString(m) }
func (*Rectangle) ProtoMessage()    {}
func (*Rectangle) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76fcd9484938dcc, []int{3}
}

func (m *Rectangle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rectangle.Unmarshal(m, b)
}
func (m *Rectangle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rectangle.Marshal(b, m, deterministic)
}
func (m *Rectangle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rectangle.Merge(m, src)
}
func (m *Rectangle) XXX_Size() int {
	return xxx_messageInfo_Rectangle.Size(m)
}
func (m *Rectangle) XXX_DiscardUnknown() {
	xxx_messageInfo_Rectangle.DiscardUnknown(m)
}

var xxx_messageInfo_Rectangle proto.InternalMessageInfo

func (m *Rectangle) GetLo() *Point {
	if m != nil {
		return m.Lo
	}
	return nil
}

func (m *Rectangle) GetHi() *Point {
	if m != nil {
		return m.Hi
	}
	return nil
}

type RouteNote struct {
	// The location from which the message is sent.
	Location *Point `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// The message to be sent.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteNote) Reset()         { *m = RouteNote{} }
func (m *RouteNote) String() string { return proto.CompactTextString(m) }
func (*RouteNote) ProtoMessage()    {}
func (*RouteNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76fcd9484938dcc, []int{4}
}

func (m *RouteNote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteNote.Unmarshal(m, b)
}
func (m *RouteNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteNote.Marshal(b, m, deterministic)
}
func (m *RouteNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteNote.Merge(m, src)
}
func (m *RouteNote) XXX_Size() int {
	return xxx_messageInfo_RouteNote.Size(m)
}
func (m *RouteNote) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteNote.DiscardUnknown(m)
}

var xxx_messageInfo_RouteNote proto.InternalMessageInfo

func (m *RouteNote) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *RouteNote) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Feature struct {
	// The name of the feature.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The point where the feature is detected.
	Location             *Point   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76fcd9484938dcc, []int{5}
}

func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

type RouteSummary struct {
	// The number of points received.
	PointCount int32 `protobuf:"varint,1,opt,name=point_count,json=pointCount,proto3" json:"point_count,omitempty"`
	// The number of known features passed while traversing the route.
	FeatureCount int32 `protobuf:"varint,2,opt,name=feature_count,json=featureCount,proto3" json:"feature_count,omitempty"`
	// The distance covered in metres.
	Distance int32 `protobuf:"varint,3,opt,name=distance,proto3" json:"distance,omitempty"`
	// The duration of the traversal in seconds.
	ElapsedTime          int32    `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteSummary) Reset()         { *m = RouteSummary{} }
func (m *RouteSummary) String() string { return proto.CompactTextString(m) }
func (*RouteSummary) ProtoMessage()    {}
func (*RouteSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76fcd9484938dcc, []int{6}
}

func (m *RouteSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteSummary.Unmarshal(m, b)
}
func (m *RouteSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteSummary.Marshal(b, m, deterministic)
}
func (m *RouteSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteSummary.Merge(m, src)
}
func (m *RouteSummary) XXX_Size() int {
	return xxx_messageInfo_RouteSummary.Size(m)
}
func (m *RouteSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RouteSummary proto.InternalMessageInfo

func (m *RouteSummary) GetPointCount() int32 {
	if m != nil {
		return m.PointCount
	}
	return 0
}

func (m *RouteSummary) GetFeatureCount() int32 {
	if m != nil {
		return m.FeatureCount
	}
	return 0
}

func (m *RouteSummary) GetDistance() int32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *RouteSummary) GetElapsedTime() int32 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func init() {
	proto.RegisterEnum("twoway.Emiu_Corpus", Emiu_Corpus_name, Emiu_Corpus_value)
	proto.RegisterType((*OneOfMessage)(nil), "twoway.OneOfMessage")
	proto.RegisterType((*Emiu)(nil), "twoway.Emiu")
	proto.RegisterType((*Point)(nil), "twoway.Point")
	proto.RegisterType((*Rectangle)(nil), "twoway.Rectangle")
	proto.RegisterType((*RouteNote)(nil), "twoway.RouteNote")
	proto.RegisterType((*Feature)(nil), "twoway.Feature")
	proto.RegisterType((*RouteSummary)(nil), "twoway.RouteSummary")
}

func init() { proto.RegisterFile("twoway/twoway.proto", fileDescriptor_b76fcd9484938dcc) }

var fileDescriptor_b76fcd9484938dcc = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdd, 0x6e, 0xda, 0x4c,
	0x10, 0xc5, 0x0e, 0x10, 0x3c, 0x90, 0xef, 0xa3, 0x93, 0xa8, 0x45, 0xb4, 0x55, 0xa8, 0x7b, 0x51,
	0x7a, 0x63, 0xa2, 0x44, 0x4a, 0x6f, 0x7a, 0x03, 0x84, 0x06, 0x2a, 0x12, 0x90, 0x9d, 0x1f, 0x29,
	0x52, 0x15, 0x2d, 0x66, 0x63, 0x2c, 0xad, 0xbd, 0x5b, 0x7b, 0x5d, 0x4a, 0x5f, 0xa3, 0x4f, 0xd0,
	0x3e, 0x69, 0xe5, 0x3f, 0x42, 0x93, 0xa8, 0x57, 0xde, 0x33, 0xe7, 0xcc, 0xcc, 0xfa, 0xec, 0x68,
	0x60, 0x57, 0x2e, 0xf9, 0x92, 0xac, 0x3a, 0xe9, 0xc7, 0x10, 0x01, 0x97, 0x1c, 0xcb, 0x29, 0x6a,
	0xbe, 0x5c, 0x50, 0xc6, 0xf8, 0x92, 0x07, 0x6c, 0xde, 0xb9, 0x3f, 0xa6, 0x22, 0xdd, 0x82, 0xda,
	0xc4, 0xa7, 0x93, 0xbb, 0x33, 0x1a, 0x86, 0xc4, 0xa1, 0xb8, 0x07, 0x45, 0x9f, 0x78, 0xb4, 0x51,
	0x6c, 0x29, 0x6d, 0x6d, 0x58, 0x30, 0x13, 0x84, 0xfb, 0xa0, 0x0a, 0xd9, 0xd0, 0x5a, 0x4a, 0xbb,
	0x7a, 0xb8, 0x63, 0x64, 0x5d, 0xa6, 0xdc, 0xf5, 0xe5, 0xb0, 0x60, 0xaa, 0x42, 0xf6, 0x6a, 0x00,
	0x92, 0x86, 0xf2, 0x96, 0xfb, 0x94, 0xdf, 0xe9, 0xbf, 0x14, 0x28, 0x0e, 0x3c, 0x37, 0xc2, 0x3d,
	0x28, 0x7d, 0x23, 0x2c, 0xa2, 0x0d, 0xa5, 0xa5, 0xb4, 0x4b, 0x66, 0x0a, 0xf0, 0x1d, 0x14, 0xe5,
	0x4a, 0xd0, 0x86, 0xda, 0x52, 0xda, 0xff, 0x1d, 0xee, 0xe6, 0xf5, 0xe2, 0x0c, 0xa3, 0xcf, 0x03,
	0x11, 0x85, 0x66, 0x22, 0xd0, 0x6f, 0xa0, 0x9c, 0x62, 0xdc, 0x01, 0xed, 0xf2, 0x7c, 0x74, 0x35,
	0x30, 0xad, 0xee, 0xb8, 0x5e, 0xc0, 0x6d, 0xd8, 0xba, 0x1e, 0xf4, 0xea, 0x0a, 0x02, 0x94, 0x47,
	0x67, 0xdd, 0xd3, 0x81, 0x55, 0x57, 0x51, 0x83, 0xd2, 0x78, 0xd2, 0xef, 0x8e, 0xeb, 0x5b, 0x58,
	0x81, 0xe2, 0xf9, 0xe0, 0xda, 0xaa, 0x17, 0xb1, 0x06, 0x95, 0xa9, 0x39, 0x39, 0xb9, 0xec, 0x5f,
	0x58, 0xf5, 0x52, 0x2c, 0xb9, 0x1a, 0x9d, 0x0c, 0x26, 0xf5, 0xb2, 0xde, 0x85, 0x52, 0xf2, 0x03,
	0xd8, 0x84, 0x0a, 0x23, 0xd2, 0x95, 0xd1, 0x3c, 0xbf, 0xe6, 0x1a, 0xe3, 0x2b, 0xd0, 0x18, 0xf7,
	0x9d, 0x94, 0x54, 0x13, 0xf2, 0x3e, 0xa0, 0x8f, 0x40, 0x33, 0xa9, 0x2d, 0x89, 0xef, 0x30, 0x8a,
	0xaf, 0x41, 0x65, 0x3c, 0x29, 0xf0, 0xd0, 0x22, 0x53, 0x65, 0x3c, 0xa6, 0x17, 0x6e, 0x52, 0xe2,
	0x31, 0xbd, 0x70, 0xf5, 0x29, 0x68, 0x26, 0x8f, 0x24, 0x3d, 0xe7, 0x92, 0xe2, 0x7b, 0xa8, 0x30,
	0x6e, 0x13, 0xe9, 0x72, 0xff, 0xe9, 0x82, 0x6b, 0x1a, 0x1b, 0xb0, 0xed, 0xa5, 0x2f, 0x97, 0xd4,
	0xd6, 0xcc, 0x1c, 0xea, 0x43, 0xd8, 0xfe, 0x44, 0x89, 0x8c, 0x02, 0x8a, 0x98, 0xbd, 0xa9, 0x92,
	0x28, 0xd2, 0x17, 0xdd, 0xec, 0xa1, 0xfe, 0xb3, 0x87, 0xfe, 0x53, 0x81, 0x5a, 0x72, 0x39, 0x2b,
	0xf2, 0x3c, 0x12, 0xac, 0x70, 0x1f, 0xaa, 0x22, 0xd6, 0xdc, 0xda, 0x3c, 0xf2, 0x65, 0x66, 0x1a,
	0x24, 0xa1, 0x7e, 0x1c, 0xc1, 0xb7, 0xb0, 0x73, 0x97, 0xf6, 0xce, 0x24, 0xa9, 0x75, 0xb5, 0x2c,
	0x98, 0x8a, 0x9a, 0x50, 0x99, 0xbb, 0xa1, 0x24, 0xbe, 0x4d, 0x1b, 0x5b, 0xa9, 0xef, 0x39, 0xc6,
	0x37, 0x50, 0xa3, 0x8c, 0x88, 0x90, 0xce, 0x6f, 0xa5, 0x9b, 0x4d, 0x63, 0xc9, 0xac, 0x66, 0xb1,
	0x0b, 0xd7, 0xa3, 0x87, 0xbf, 0x55, 0xd0, 0x2e, 0x96, 0xfc, 0x9a, 0xac, 0x3e, 0xf3, 0x19, 0x7e,
	0x84, 0xb2, 0xe5, 0x7a, 0x82, 0x51, 0x6c, 0x18, 0x1b, 0x33, 0x3e, 0x8c, 0x8f, 0x26, 0xfd, 0x1a,
	0xd1, 0x50, 0x36, 0x9f, 0x3f, 0xc1, 0x08, 0xb6, 0xd2, 0x0b, 0x68, 0x00, 0x9c, 0x52, 0x99, 0xdb,
	0xf5, 0xb7, 0x11, 0xcd, 0xff, 0x73, 0x98, 0xf1, 0x7a, 0x01, 0x8f, 0xa1, 0x36, 0x76, 0xc3, 0x3c,
	0x21, 0xc4, 0x67, 0xb9, 0x64, 0x3d, 0x0e, 0x4f, 0x64, 0x1d, 0x28, 0x78, 0x0c, 0x55, 0x93, 0xda,
	0x3c, 0x98, 0x27, 0x76, 0x3e, 0x6c, 0xb4, 0xb7, 0xae, 0xb2, 0x61, 0xb6, 0x5e, 0x68, 0x2b, 0xf8,
	0x21, 0x9b, 0x8e, 0xfe, 0x82, 0xc8, 0x8d, 0x66, 0xf9, 0xc0, 0x34, 0x1f, 0x87, 0xe2, 0xb4, 0x03,
	0xa5, 0xf7, 0x05, 0x5e, 0xb8, 0xdc, 0x70, 0x02, 0x61, 0x1b, 0xf4, 0x3b, 0x89, 0xfd, 0x09, 0x33,
	0x69, 0xaf, 0x9a, 0x9a, 0x37, 0x8d, 0xb7, 0xc0, 0x54, 0xb9, 0x39, 0x72, 0x5c, 0xb9, 0x88, 0x66,
	0x86, 0xcd, 0xbd, 0x8e, 0xa0, 0xee, 0x8f, 0x05, 0xf7, 0x9d, 0x0e, 0xa3, 0x32, 0x74, 0x78, 0x47,
	0x30, 0xb2, 0x72, 0x02, 0x1e, 0xf9, 0xf3, 0x4e, 0x20, 0xec, 0x8e, 0x98, 0x65, 0x7b, 0x66, 0x56,
	0x4e, 0x76, 0xc8, 0xd1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xe4, 0x64, 0xba, 0x7f, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TwoWayJobClient is the client API for TwoWayJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TwoWayJobClient interface {
	// a simple rpc, import from other package
	Simple(ctx context.Context, in *helloworld.HelloRequest, opts ...grpc.CallOption) (*helloworld.HelloReply, error)
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
	// server-side streaming RPC where the client sends a request to the server and gets a stream to read a sequence of messages back
	ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (TwoWayJob_ListFeaturesClient, error)
	// client-side streaming RPC where the client writes a sequence of messages and sends them to the server
	RecordRoute(ctx context.Context, opts ...grpc.CallOption) (TwoWayJob_RecordRouteClient, error)
	// bidirectional streaming RPC where both sides send a sequence of messages using a read-write stream
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (TwoWayJob_RouteChatClient, error)
}

type twoWayJobClient struct {
	cc *grpc.ClientConn
}

func NewTwoWayJobClient(cc *grpc.ClientConn) TwoWayJobClient {
	return &twoWayJobClient{cc}
}

func (c *twoWayJobClient) Simple(ctx context.Context, in *helloworld.HelloRequest, opts ...grpc.CallOption) (*helloworld.HelloReply, error) {
	out := new(helloworld.HelloReply)
	err := c.cc.Invoke(ctx, "/twoway.TwoWayJob/Simple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoWayJobClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/twoway.TwoWayJob/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoWayJobClient) ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (TwoWayJob_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TwoWayJob_serviceDesc.Streams[0], "/twoway.TwoWayJob/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &twoWayJobListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TwoWayJob_ListFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type twoWayJobListFeaturesClient struct {
	grpc.ClientStream
}

func (x *twoWayJobListFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *twoWayJobClient) RecordRoute(ctx context.Context, opts ...grpc.CallOption) (TwoWayJob_RecordRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TwoWayJob_serviceDesc.Streams[1], "/twoway.TwoWayJob/RecordRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &twoWayJobRecordRouteClient{stream}
	return x, nil
}

type TwoWayJob_RecordRouteClient interface {
	Send(*Point) error
	CloseAndRecv() (*RouteSummary, error)
	grpc.ClientStream
}

type twoWayJobRecordRouteClient struct {
	grpc.ClientStream
}

func (x *twoWayJobRecordRouteClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *twoWayJobRecordRouteClient) CloseAndRecv() (*RouteSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RouteSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *twoWayJobClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (TwoWayJob_RouteChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TwoWayJob_serviceDesc.Streams[2], "/twoway.TwoWayJob/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &twoWayJobRouteChatClient{stream}
	return x, nil
}

type TwoWayJob_RouteChatClient interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ClientStream
}

type twoWayJobRouteChatClient struct {
	grpc.ClientStream
}

func (x *twoWayJobRouteChatClient) Send(m *RouteNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *twoWayJobRouteChatClient) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TwoWayJobServer is the server API for TwoWayJob service.
type TwoWayJobServer interface {
	// a simple rpc, import from other package
	Simple(context.Context, *helloworld.HelloRequest) (*helloworld.HelloReply, error)
	GetFeature(context.Context, *Point) (*Feature, error)
	// server-side streaming RPC where the client sends a request to the server and gets a stream to read a sequence of messages back
	ListFeatures(*Rectangle, TwoWayJob_ListFeaturesServer) error
	// client-side streaming RPC where the client writes a sequence of messages and sends them to the server
	RecordRoute(TwoWayJob_RecordRouteServer) error
	// bidirectional streaming RPC where both sides send a sequence of messages using a read-write stream
	RouteChat(TwoWayJob_RouteChatServer) error
}

// UnimplementedTwoWayJobServer can be embedded to have forward compatible implementations.
type UnimplementedTwoWayJobServer struct {
}

func (*UnimplementedTwoWayJobServer) Simple(ctx context.Context, req *helloworld.HelloRequest) (*helloworld.HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Simple not implemented")
}
func (*UnimplementedTwoWayJobServer) GetFeature(ctx context.Context, req *Point) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (*UnimplementedTwoWayJobServer) ListFeatures(req *Rectangle, srv TwoWayJob_ListFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (*UnimplementedTwoWayJobServer) RecordRoute(srv TwoWayJob_RecordRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordRoute not implemented")
}
func (*UnimplementedTwoWayJobServer) RouteChat(srv TwoWayJob_RouteChatServer) error {
	return status.Errorf(codes.Unimplemented, "method RouteChat not implemented")
}

func RegisterTwoWayJobServer(s *grpc.Server, srv TwoWayJobServer) {
	s.RegisterService(&_TwoWayJob_serviceDesc, srv)
}

func _TwoWayJob_Simple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(helloworld.HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoWayJobServer).Simple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twoway.TwoWayJob/Simple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoWayJobServer).Simple(ctx, req.(*helloworld.HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoWayJob_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoWayJobServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twoway.TwoWayJob/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoWayJobServer).GetFeature(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoWayJob_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Rectangle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TwoWayJobServer).ListFeatures(m, &twoWayJobListFeaturesServer{stream})
}

type TwoWayJob_ListFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type twoWayJobListFeaturesServer struct {
	grpc.ServerStream
}

func (x *twoWayJobListFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func _TwoWayJob_RecordRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TwoWayJobServer).RecordRoute(&twoWayJobRecordRouteServer{stream})
}

type TwoWayJob_RecordRouteServer interface {
	SendAndClose(*RouteSummary) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type twoWayJobRecordRouteServer struct {
	grpc.ServerStream
}

func (x *twoWayJobRecordRouteServer) SendAndClose(m *RouteSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *twoWayJobRecordRouteServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TwoWayJob_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TwoWayJobServer).RouteChat(&twoWayJobRouteChatServer{stream})
}

type TwoWayJob_RouteChatServer interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ServerStream
}

type twoWayJobRouteChatServer struct {
	grpc.ServerStream
}

func (x *twoWayJobRouteChatServer) Send(m *RouteNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *twoWayJobRouteChatServer) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TwoWayJob_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twoway.TwoWayJob",
	HandlerType: (*TwoWayJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Simple",
			Handler:    _TwoWayJob_Simple_Handler,
		},
		{
			MethodName: "GetFeature",
			Handler:    _TwoWayJob_GetFeature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatures",
			Handler:       _TwoWayJob_ListFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordRoute",
			Handler:       _TwoWayJob_RecordRoute_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RouteChat",
			Handler:       _TwoWayJob_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "twoway/twoway.proto",
}
